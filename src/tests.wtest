import tp.*
import fixture.*

test "PINTURA: Latas necesarias para 251m2 deben ser 6" {
	assert.equals(6,balde.latasNecesarias(251))
}

test "PINTURA: Latas necesarias para 250m2deben ser 5"{
	assert.equals(5,balde.latasNecesarias(250))
}
test "PINTURA: Latas necesarias para 249m2deben ser 5"{
	assert.equals(5,balde.latasNecesarias(249))
}

test "PINTURA: Costo de pintura de una superfi de 10m2 debe ser 200" {
	assert.equals(200,balde.precioPintura(10))
}

test "PINTURA: Costo de pintura de una superfi de 250m2 debe ser 1000" {
	assert.equals(1000,balde.precioPintura(250))
}


test "PINTORES: mano de obra de raul por 20m2 debe ser 500"{
	
	assert.equals(500,raul.costoManoDeObra(20))
}
test "PINTORES: total de raul por 20m2 debe ser 700"{
	const casaDePrueba = new Casa(2)
	fixture.casaDePrueba(casaDePrueba,20)
	assert.equals(700,raul.costoTotal(casaDePrueba))
}

test "PINTORES: total de carlos por 20m2 debe ser 500"{
	const casaDePrueba = new Casa(2)
	fixture.casaDePrueba(casaDePrueba,20)
	assert.equals(500,carlos.costoTotal(casaDePrueba))
}
test "PINTORES: total de carlos por 32m2 debe ser 860"{
	const casaDePrueba = new Casa(2)
	fixture.casaDePrueba(casaDePrueba,32)
	assert.equals(860,carlos.costoTotal(casaDePrueba))
}
test "PINTORES: mano de obra de venancio por 32m2 debe ser 880"{
	
	assert.equals(880,venancio.costoManoDeObra(32))
}
test "PINTORES: mano de obra de venancio por 20m2 debe ser 440"{
	assert.equals(440,venancio.costoManoDeObra(20))
}

test "PINTORES: total de venancio por 32m2 debe ser 1080"{
	const casaDePrueba = new Casa(2)
	fixture.casaDePrueba(casaDePrueba,32)
	assert.equals(1080,venancio.costoTotal(casaDePrueba))
}
test "AMBIENTES: Superficie de la cocina debe ser 21m"{
	const cocina = new Cocina(2,1,3.5)
	assert.equals(21,cocina.superficie())
}
test "AMBIENTES: Superficie de la habitacion debe ser 20m"{
	const habitacion = new CuartoDeAldo(20)
	assert.equals(20,habitacion.superficie())
}

test "ALDO: Superficie total a pintar para aldo debe ser 41"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	assert.equals(41,aldo.superficieAPintar())
}
test "ALDO: Presupuesto maximo debe ser 1200"{
	const aldo = new Persona(6000)
	assert.equals(1200,aldo.presupuesto())
}
test "ALDO: Puede contratar a raul debe ser no"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	assert.notThat(aldo.puedeContratarA(raul))
}
test"ALDO: Si ahorra 2000 mas puede contratar a raul debe ser si"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	aldo.ahorrarMas(2000)
	assert.that(aldo.puedeContratarA(raul))
}

test "ALDO: Si ahorra 1000 mas, la pintura ahora cuesta 400 aldo puede contratar a raul debe ser falso"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	aldo.ahorrarMas(1000)
	balde.nuevoPrecio(400)
	assert.notThat(aldo.puedeContratarA(raul))
}
test"ALDO: Puede contratar a carlos debe ser true"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	assert.that(aldo.puedeContratarA(carlos))
}
test"ALDO: Puede contratar a venancio debe ser false"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	assert.notThat(aldo.puedeContratarA(venancio))
}
test "ALDO: Si ahorra 2000 mas puede contratar a venancio debe ser true"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	aldo.ahorrarMas(2000)
	assert.that(aldo.puedeContratarA(venancio))
}
test "PINTURA A GRANEL: el costo de una pintura de una superficie de 10m2 debe ser 35"{
	assert.equals(35,granel.precioPintura(10))  
}
test "PINTURA A GRANEL: el costo de una pintura de una superficie de 250m2 debe ser 875"{
	assert.equals(875,granel.precioPintura(250))
}
test"PINTURA A GRANEL: venancio trabaja con pintura a granel; alddo puede contratar a venancio debe ser false"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	venancio.cambioDeTipo(granel)
	assert.notThat(aldo.puedeContratarA(venancio))
	}

// Parte 2

test "cuanto cobra emanuel por la casa de aldo debe ser 400k"{
	const emanuel = new Arquitecto(100000)
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	assert.equals(400000,emanuel.costoTotal(casaDeAldo))
}
test "cuanto cobra marcos por la casa de aldo debe ser 100k"{
	const marcos = new MaestroMayorDeObra(50000)
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	assert.equals(100000,marcos.costoTotal(casaDeAldo))
}
test "cuanto cobra marcos por una casa compli debe ser 360k"{
	const marcos = new MaestroMayorDeObra(50000)
	const alguien = new Persona(6000)
	const casaComplicada = new Casa(2)
	fixture.casaComplicada(casaComplicada,alguien)
	assert.equals(360000,marcos.costoTotal(casaComplicada))
}

test "cuanto cobra lito por la casa de aldo debe ser 1600"{
	const lito = new Albanil(16)
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	assert.equals(1600,lito.costoTotal(casaDeAldo))
}
test "cuanto cobra eduardo por la casa de aldo debe ser 200"{
	
	const eduardo = new Electricista(100)
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	assert.equals(200,eduardo.costoTotal(casaDeAldo))
}
test "cuanto cobra eduardo por una casa complicada de 4 ambientes debe ser 800"{
	const eduardo = new Electricista(100)
	const alguien = new Persona(6000)
	const casaComplicada = new Casa(3)
	fixture.casaComplicadaDe4Ambientes(casaComplicada,alguien)
	assert.equals(800,eduardo.costoTotal(casaComplicada))
}
test "cuanto cobra roger por la casa de aldo debe ser 200"{
	const roger = new Plomero(1.1)
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	assert.equals(200,roger.costoTotal(casaDeAldo))
}
test "cuanto cobra roger por la casa de 4pisos y 7ambientes debe ser 770"{
	const roger = new Plomero(1.1)
	const alguien = new Persona(6000)
	const casaComplicada = new Casa(4)
	fixture.casaDe4pisosY7Ambientes(casaComplicada,alguien)
	assert.equals(770,roger.costoTotal(casaComplicada))
}
test"la casa de aldo es complicadda debe ser false"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	assert.notThat(casaDeAldo.esComplicada())
}
test "la superficie de la casa de aldo es 41"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	fixture.casaDeAldo(casaDeAldo,aldo)
	assert.equals(41,casaDeAldo.superficieTotal())
}
test " que contratistas puede contratar aldo son carlos eduardo y roger"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	const agencia = new Agencia()
	const emanuel = new Arquitecto(100000)
	const marcos = new MaestroMayorDeObra(50000)
	const lito = new Albanil(16)
	const roger = new Plomero(1.1)
	const eduardo = new Electricista(100)
	fixture.casaDeAldo(casaDeAldo,aldo)
	agencia.agregarEmpleados([emanuel,marcos,lito,roger,eduardo,carlos,venancio,raul])
	assert.equals([roger,eduardo,carlos],agencia.empleadosQuePuedeContratar(aldo))	//DUDA: esta bien testeado así?
}

test "aldo contrta a roger cual ees su presupuesto max ahora es 1160"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	const roger = new Plomero(1.1)
	fixture.casaDeAldo(casaDeAldo,aldo)
	aldo.contratarA(roger)
	assert.equals(1160,aldo.presupuesto())
}
test "aldo contrata a roger y a carlos, cuantos servicios tuvo"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	const roger = new Plomero(1.1)
	fixture.casaDeAldo(casaDeAldo,aldo)
	aldo.contratarA(roger)
	aldo.contratarA(carlos)
	assert.equals(2,aldo.cantidadDeServiciosContratados())
}
test "aldo intenta c ontratar a marcos no puede pq no le da el presupuesto"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	const marcos = new MaestroMayorDeObra(50000)
	fixture.casaDeAldo(casaDeAldo,aldo)
	assert.throwsExceptionWithMessage("No se le puede abonar",{aldo.contratarA(marcos)})
}
test "aldo contrata a roger y a carlos. saber si fue un descuidado"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	const roger = new Plomero(1.1)
	fixture.casaDeAldo(casaDeAldo,aldo)
	aldo.contratarA(roger)
	aldo.contratarA(carlos)
	assert.notThat(aldo.fueUnDescuidado())
}
test "aldo ahorra 1millon, contrata amarcos saber si fue un descuidado"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	const marcos = new MaestroMayorDeObra(50000)
	fixture.casaDeAldo(casaDeAldo,aldo)
	aldo.ahorrarMas(1000000)
	aldo.contratarA(marcos)
	assert.that(aldo.fueUnDescuidado())
}
test "aldo contrata a roger y a carlos, el mas caro fue el de carlos"{
	const aldo = new Persona(6000)
	const casaDeAldo = new Casa(2)
	const roger = new Plomero(1.1)
	fixture.casaDeAldo(casaDeAldo,aldo)
	aldo.contratarA(roger)
	aldo.contratarA(carlos)
	assert.equals(carlos, aldo.nombreDelServicioMasCaro())
	
}

// Parte 3

test "costo de noelia para damian debe ser 2000"{
	const damian = new Damian(250000)
	const casaDeDamian = new Casa(4)
	const noelia = new Electricista(250)
	fixture.casaDeDamian(casaDeDamian,damian)
	assert.equals(2000,noelia.costoTotal(casaDeDamian))
}
test "costo de silvina para damian debe ser 500"{
	const damian = new Damian(250000)
	const casaDeDamian = new Casa(4)
	const silvina = new Plomero(1.25)
	fixture.casaDeDamian(casaDeDamian,damian)
	assert.equals(500,silvina.costoTotal(casaDeDamian))
}
test "costo de noelia para milena debe ser 500"{
	const milena = new Persona(2000)
	const casaDeMilena = new Casa(3)
	const noelia = new Electricista(250)
	fixture.casaDeMilena(casaDeMilena,milena)
	assert.equals(500,noelia.costoTotal(casaDeMilena))
}
test "costo de eliana para damian debe ser 57600"{
	const damian = new Damian(250000)
	const casaDeDamian = new Casa(4)
	const eliana = new MaestroMayorDeObra(12000)
	fixture.casaDeDamian(casaDeDamian,damian)
	assert.equals(57600,eliana.costoTotal(casaDeDamian))
}
test "que contratistas de la ag nueva puede contratar milena -> solo silvina"{
	const milena = new Persona(2000)
	const casaDeMilena = new Casa(3)
	const noelia = new Electricista(250)
	const silvina = new Plomero(1.25)
	const eliana = new MaestroMayorDeObra(12000)
	const dodain = new Albanil(24)
	const agencia = new Agencia()
	fixture.casaDeMilena(casaDeMilena,milena)
	agencia.agregarEmpleados([noelia,silvina,eliana,dodain])
	assert.equals([silvina],agencia.empleadosQuePuedeContratar(milena))
}
	
test "que contratistas de la ag nueva puede contratardamian  -> noelia silvina dodain"{
	const damian = new Damian(250000)
	const casaDeDamian = new Casa(4)
	const noelia = new Electricista(250)
	const silvina = new Plomero(1.25)
	const eliana = new MaestroMayorDeObra(12000)
	const dodain = new Albanil(24)
	fixture.casaDeDamian(casaDeDamian,damian)
	const agencia = new Agencia()
	agencia.agregarEmpleados([noelia,silvina,eliana,dodain])
	assert.equals([noelia,silvina,dodain],agencia.empleadosQuePuedeContratar(damian))
}
test "damian ahorra 1,5M contrata a eliana y silvina saber si fue descuidado -> false"{
	const damian = new Damian(250000)
	const casaDeDamian = new Casa(4)
	const eliana = new MaestroMayorDeObra(12000)
	const silvina = new Plomero(1.25)
	fixture.casaDeDamian(casaDeDamian,damian)
	damian.ahorrarMas(1500000)
	damian.contratarA(eliana)
	damian.contratarA(silvina)
	assert.notThat(damian.fueUnDescuidado())	
}
test "milena ahorra 1,5M contrata a eliana y silvina saber si fue descuidado -> true"{
	const milena = new Persona(2000)
	const casaDeMilena = new Casa(3)
	const eliana = new MaestroMayorDeObra(12000)
	const silvina = new Plomero(1.25)
	fixture.casaDeMilena(casaDeMilena,milena)
	milena.ahorrarMas(1500000)
	milena.contratarA(eliana)
	milena.contratarA(silvina)
	assert.that(milena.fueUnDescuidado())	
}
test "milena ahorra 1,5Mcontrata 2 veces a eliana 1 a silvana, debe indicar el conj de contratistas q le realizaron un trabajo silvana y eliana"{
	const milena = new Persona(2000)
	const casaDeMilena = new Casa(3)
	const eliana = new MaestroMayorDeObra(12000)
	const silvina = new Plomero(1.25)
	fixture.casaDeMilena(casaDeMilena,milena)
	milena.ahorrarMas(1500000)
	milena.contratarA(eliana)
	milena.contratarA(eliana)
	milena.contratarA(silvina)
	milena.contratarA(silvina)
	assert.equals(#{eliana,silvina},milena.leRealizaronUnTrabajo()) 
}

test"damian contrata a dodain y luego a silvina. dodain lo tomo de punto? -> false"{
	const damian = new Damian(250000)
	const casaDeDamian = new Casa(4)
	const silvina = new Plomero(1.25)
	const dodain = new Albanil(24)
	fixture.casaDeDamian(casaDeDamian,damian)
	damian.contratarA(silvina)
	damian.contratarA(dodain)
	assert.notThat(dodain.loTomoDePunto(damian))
}
test"damian contrata a dodain y luego a silvina y luego dodain. dodain lo tomo de punto? -> true"{
	const damian = new Damian(250000)
	const casaDeDamian = new Casa(4)
	const silvina = new Plomero(1.25)
	const dodain = new Albanil(24)
	fixture.casaDeDamian(casaDeDamian,damian)
	damian.contratarA(dodain)
	damian.contratarA(silvina)
	damian.contratarA(dodain)
	assert.that(dodain.loTomoDePunto(damian))
}
test"damian contrata a dodain y luego a silvina y luego dodain. cuanto le pago a dodain en el ems es 9600"{
	const damian = new Damian(250000)
	const casaDeDamian = new Casa(4)
	const silvina = new Plomero(1.25)
	const dodain = new Albanil(24)
	fixture.casaDeDamian(casaDeDamian,damian)
	damian.contratarA(dodain)
	damian.contratarA(silvina)
	damian.contratarA(dodain)
	assert.equals(9600,dodain.cuantoMePagoEnElMes(damian))
}
